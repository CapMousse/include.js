{"google":"UA-24455497-2","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A tiny (800kb) Javascript Module Loader","body":"## What's Include.js ?\r\n\r\n**Include.js** is a tiny (800b minified and gziped) Javascript loader. It can load normal javascript files but is more efficient with **web modules**.\r\n\r\nWhen it's possible, it will use async loading to speed up you page and will ensure the good executions of your script. It support **nested dependencies**, a useful feature to create clean and flexible javascript application.\r\n\r\nInclude.js was tested on :\r\n\r\n- Chrome √\r\n- Opera √\r\n- Safari √\r\n- IE √ (IE 7+)\r\n\r\n## How to use\r\n\r\n### Create a module\r\nTo create a module, create a new javascript file and use `include()` as a wrapper :\r\n\r\n```javascript\r\ninclude(function(){\r\n  return {\r\n    name : \"Mars Curiosity\"\r\n  }\r\n})\r\n```\r\n\r\n### Naming a module\r\nYou can name your module with the first argument of `include()`.  Name are like `PHP` namespace : `Dir/FileName.js` -> `Dir.FileName`\r\n\r\n```javascript\r\ninclude('App.Planet', function(){\r\n  return {\r\n    name      : \"Mars\",\r\n    gravity   : 0.376,\r\n    saletties : 2\r\n  }\r\n})\r\n```\r\n\r\n### Load dependencies\r\nModules can use dependencies to work, as an array on second argument of `include()` :\r\n\r\n```javascript\r\ninclude('App.Nasa', ['App/Rover.js', 'App.Planet'], function(Rover, Planet){\r\n  return {\r\n    rover   : Rover.name,\r\n    planet  : Planet.name,\r\n    success : true \r\n  }\r\n});\r\n```\r\n\r\n## Tests\r\nUnit test are made with [Jasmine](http://pivotal.github.com/jasmine/) and can be run by launching `Tests/SpecRunner.html` on any browser.\r\n## Licence\r\n**Include.js** is distributed under the MIT license.","name":"Include.js"}